"""
    Clicker Hero Bot
    Copyright (C) 2015  Joel Whitcomb

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

run clicker.py

It expects the game to be played in windowed mode with a window size of 1662, 942. It will print how close you are to the right size until you achieve it.

Features:
 Can click the fruit/clickables/headcrabs whatevers for rubies without missing
 Can execute the dark ritual combo (all skills are tracked)
 Can identify all available heroes
 Can scroll to and purchase either set increments (1/10/25/100) of any hero or up to any amount
 Can turn progression mode on if its turned off. tracks every hero's skill level when it gets turned off (allows for simple 25 level comparisons)
 Can click the buy all skills button on demand
 Can track souls and calculate peak souls per minute

Yet to implement:
 Ascending
 Info tracking between script runs (export to csv or something)

Refactoring needed:
 Remove all hardcoded integer based offsets, allow for "dynamic" ones based off user settings

Long term plans:
 GUI control and stats panel
 package script as exe with all needed libraries and stuff

Even Longer term plans:
 Intermediary JSON/XML based orders setup, build an equivalent "not_as_dumb_buy" function completely from that.
 Build a GUI editor for said JSON/XML datapacket

Application requirements...

Python3

PIL (python 3 version)
pyttsx (for the audio feedback)
pyautogui (handles all the mouse/keyboard control)
numpy (performs the grunt work in image comparison)
pytesseract (ocr engine to read the hero names/level)
matplotlib (because i havent commented it out yet)
